{
  "cells": [
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "# Clustering for mental health:"
      ],
      "metadata": {},
      "id": "0c187e7d"
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython.core.interactiveshell import InteractiveShell\n",
        "InteractiveShell.ast_node_interactivity = \"all\"\n",
        "import numpy as np\n",
        "import datetime\n",
        "import matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib import colors\n",
        "import seaborn as sns\n",
        "from pandas_profiling import ProfileReport\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.cluster import KMeans\n",
        "import matplotlib.pyplot as plt, numpy as np\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "from sklearn.cluster import AgglomerativeClustering\n",
        "from matplotlib.colors import ListedColormap\n",
        "from sklearn import metrics\n",
        "import sys\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "<ipython-input-1-633ad582454a>:11: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.\n  from pandas_profiling import ProfileReport\n"
        }
      ],
      "execution_count": 1,
      "metadata": {},
      "id": "a609c8eb"
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv(\"new_datapfe.csv\")\n",
        "pd.set_option('display.max_columns', None)\n",
        "df "
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 2,
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Patient_ID</th>\n      <th>SEX</th>\n      <th>MARITAL</th>\n      <th>EDUCA</th>\n      <th>WEIGHT2</th>\n      <th>HEIGHT3</th>\n      <th>_INCOMG</th>\n      <th>_BMI5</th>\n      <th>_AGEG5YR</th>\n      <th>GENHLTH</th>\n      <th>EXERANY2</th>\n      <th>EXRACT11</th>\n      <th>EXEROFT1</th>\n      <th>EXERHMM1</th>\n      <th>EXRACT21</th>\n      <th>EXEROFT2</th>\n      <th>EXERHMM2</th>\n      <th>ALCDAY5</th>\n      <th>AVEDRNK2</th>\n      <th>MAXDRNKS</th>\n      <th>DROCDY3_</th>\n      <th>_RFBING5</th>\n      <th>_DRNKWEK</th>\n      <th>_RFDRHV5</th>\n      <th>DRNKANY5</th>\n      <th>MENTHLTH</th>\n      <th>FRUIT1</th>\n      <th>FVBEANS</th>\n      <th>FVGREEN</th>\n      <th>FVORANG</th>\n      <th>VEGETAB1</th>\n      <th>FRUTDA1_</th>\n      <th>BEANDAY_</th>\n      <th>GRENDAY_</th>\n      <th>ORNGDAY_</th>\n      <th>VEGEDA1_</th>\n      <th>_FRUTSUM</th>\n      <th>_VEGESUM</th>\n      <th>_FRTLT1</th>\n      <th>_VEGLT1</th>\n      <th>BPHIGH4</th>\n      <th>BPMEDS</th>\n      <th>BLOODCHO</th>\n      <th>CHOLCHK</th>\n      <th>TOLDHI2</th>\n      <th>CVDINFR4</th>\n      <th>CVDCRHD4</th>\n      <th>CVDSTRK3</th>\n      <th>_MICHD</th>\n      <th>CHCSCNCR</th>\n      <th>DIABETE3</th>\n      <th>SMOKE100</th>\n      <th>SMOKDAY2</th>\n      <th>USENOW3</th>\n      <th>_SMOKER3</th>\n      <th>_RFSMOK3</th>\n      <th>PHYSHLTH</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>4</td>\n      <td>280.0</td>\n      <td>510.0</td>\n      <td>2</td>\n      <td>4018.0</td>\n      <td>9</td>\n      <td>5.0</td>\n      <td>2.0</td>\n      <td>52.432544</td>\n      <td>103.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>18</td>\n      <td>310.0</td>\n      <td>320.0</td>\n      <td>310.0</td>\n      <td>305.0</td>\n      <td>101.0</td>\n      <td>33.0</td>\n      <td>67.0</td>\n      <td>33.0</td>\n      <td>17.0</td>\n      <td>100.0</td>\n      <td>50.0</td>\n      <td>217.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>6</td>\n      <td>165.0</td>\n      <td>508.0</td>\n      <td>1</td>\n      <td>2509.0</td>\n      <td>7</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>64.000000</td>\n      <td>212.0</td>\n      <td>100.0</td>\n      <td>69.0</td>\n      <td>212.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>305.0</td>\n      <td>302.0</td>\n      <td>202.0</td>\n      <td>202.0</td>\n      <td>304.0</td>\n      <td>17.0</td>\n      <td>7.0</td>\n      <td>29.0</td>\n      <td>29.0</td>\n      <td>13.0</td>\n      <td>24.0</td>\n      <td>78.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>158.0</td>\n      <td>511.0</td>\n      <td>5</td>\n      <td>2204.0</td>\n      <td>11</td>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>52.432544</td>\n      <td>103.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>900</td>\n      <td>1</td>\n      <td>99900</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>101.0</td>\n      <td>555.0</td>\n      <td>101.0</td>\n      <td>555.0</td>\n      <td>101.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n      <td>100.0</td>\n      <td>100.0</td>\n      <td>200.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>7</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>2</td>\n      <td>1</td>\n      <td>4</td>\n      <td>180.0</td>\n      <td>507.0</td>\n      <td>5</td>\n      <td>2819.0</td>\n      <td>9</td>\n      <td>5.0</td>\n      <td>2.0</td>\n      <td>52.432544</td>\n      <td>103.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>30</td>\n      <td>101.0</td>\n      <td>555.0</td>\n      <td>301.0</td>\n      <td>301.0</td>\n      <td>201.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>14.0</td>\n      <td>100.0</td>\n      <td>20.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>30.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>2</td>\n      <td>1</td>\n      <td>5</td>\n      <td>142.0</td>\n      <td>504.0</td>\n      <td>5</td>\n      <td>2437.0</td>\n      <td>9</td>\n      <td>5.0</td>\n      <td>2.0</td>\n      <td>52.432544</td>\n      <td>103.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>102.0</td>\n      <td>203.0</td>\n      <td>204.0</td>\n      <td>310.0</td>\n      <td>320.0</td>\n      <td>200.0</td>\n      <td>43.0</td>\n      <td>57.0</td>\n      <td>33.0</td>\n      <td>67.0</td>\n      <td>100.0</td>\n      <td>200.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>20.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>441451</th>\n      <td>441452</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n      <td>104.0</td>\n      <td>503.0</td>\n      <td>2</td>\n      <td>1842.0</td>\n      <td>11</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>52.432544</td>\n      <td>103.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>555.0</td>\n      <td>205.0</td>\n      <td>555.0</td>\n      <td>201.0</td>\n      <td>201.0</td>\n      <td>0.0</td>\n      <td>71.0</td>\n      <td>0.0</td>\n      <td>14.0</td>\n      <td>14.0</td>\n      <td>29.0</td>\n      <td>200.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>441452</th>\n      <td>441453</td>\n      <td>2</td>\n      <td>1</td>\n      <td>5</td>\n      <td>160.0</td>\n      <td>503.0</td>\n      <td>1</td>\n      <td>2834.0</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>64.000000</td>\n      <td>105.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>101.0</td>\n      <td>202.0</td>\n      <td>303.0</td>\n      <td>201.0</td>\n      <td>202.0</td>\n      <td>100.0</td>\n      <td>29.0</td>\n      <td>10.0</td>\n      <td>14.0</td>\n      <td>29.0</td>\n      <td>117.0</td>\n      <td>82.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>441453</th>\n      <td>441454</td>\n      <td>2</td>\n      <td>1</td>\n      <td>4</td>\n      <td>247.0</td>\n      <td>505.0</td>\n      <td>3</td>\n      <td>4110.0</td>\n      <td>11</td>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>52.432544</td>\n      <td>103.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>202.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>93</td>\n      <td>1</td>\n      <td>1</td>\n      <td>20</td>\n      <td>101.0</td>\n      <td>555.0</td>\n      <td>101.0</td>\n      <td>555.0</td>\n      <td>101.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n      <td>100.0</td>\n      <td>100.0</td>\n      <td>200.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>441454</th>\n      <td>441455</td>\n      <td>1</td>\n      <td>5</td>\n      <td>5</td>\n      <td>166.0</td>\n      <td>511.0</td>\n      <td>1</td>\n      <td>2315.0</td>\n      <td>7</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>52.432544</td>\n      <td>103.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>101.0</td>\n      <td>101.0</td>\n      <td>202.0</td>\n      <td>301.0</td>\n      <td>301.0</td>\n      <td>100.0</td>\n      <td>100.0</td>\n      <td>29.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>200.0</td>\n      <td>135.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>441455</th>\n      <td>441456</td>\n      <td>2</td>\n      <td>1</td>\n      <td>6</td>\n      <td>135.0</td>\n      <td>502.0</td>\n      <td>1</td>\n      <td>2469.0</td>\n      <td>9</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>64.000000</td>\n      <td>103.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>101.0</td>\n      <td>201.0</td>\n      <td>201.0</td>\n      <td>201.0</td>\n      <td>202.0</td>\n      <td>100.0</td>\n      <td>14.0</td>\n      <td>14.0</td>\n      <td>14.0</td>\n      <td>29.0</td>\n      <td>200.0</td>\n      <td>71.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>441456 rows × 57 columns</p>\n</div>",
            "text/plain": "        Patient_ID  SEX  MARITAL  EDUCA  WEIGHT2  HEIGHT3  _INCOMG   _BMI5  \\\n0                1    2        1      4    280.0    510.0        2  4018.0   \n1                2    2        2      6    165.0    508.0        1  2509.0   \n2                3    2        2      4    158.0    511.0        5  2204.0   \n3                4    2        1      4    180.0    507.0        5  2819.0   \n4                5    2        1      5    142.0    504.0        5  2437.0   \n...            ...  ...      ...    ...      ...      ...      ...     ...   \n441451      441452    2        3      2    104.0    503.0        2  1842.0   \n441452      441453    2        1      5    160.0    503.0        1  2834.0   \n441453      441454    2        1      4    247.0    505.0        3  4110.0   \n441454      441455    1        5      5    166.0    511.0        1  2315.0   \n441455      441456    2        1      6    135.0    502.0        1  2469.0   \n\n        _AGEG5YR  GENHLTH  EXERANY2   EXRACT11  EXEROFT1  EXERHMM1  EXRACT21  \\\n0              9      5.0       2.0  52.432544     103.0      30.0       0.0   \n1              7      3.0       1.0  64.000000     212.0     100.0      69.0   \n2             11      4.0       1.0  52.432544     103.0      30.0       0.0   \n3              9      5.0       2.0  52.432544     103.0      30.0       0.0   \n4              9      5.0       2.0  52.432544     103.0      30.0       0.0   \n...          ...      ...       ...        ...       ...       ...       ...   \n441451        11      4.0       2.0  52.432544     103.0      30.0       0.0   \n441452         2      1.0       1.0  64.000000     105.0      30.0       0.0   \n441453        11      4.0       1.0  52.432544     103.0      30.0       0.0   \n441454         7      3.0       2.0  52.432544     103.0      30.0       0.0   \n441455         9      2.0       1.0  64.000000     103.0      30.0       0.0   \n\n        EXEROFT2  EXERHMM2  ALCDAY5  AVEDRNK2  MAXDRNKS  DROCDY3_  _RFBING5  \\\n0          102.0      30.0      0.0       1.0       2.0         0         1   \n1          212.0     100.0      0.0       1.0       2.0         0         1   \n2          102.0      30.0      0.0       1.0       2.0       900         1   \n3          102.0      30.0      0.0       1.0       2.0         0         1   \n4          102.0      30.0      0.0       1.0       2.0         0         1   \n...          ...       ...      ...       ...       ...       ...       ...   \n441451     102.0      30.0      0.0       1.0       2.0         0         1   \n441452     102.0      30.0      0.0       1.0       2.0         0         1   \n441453     102.0      30.0    202.0       2.0       2.0         7         1   \n441454     102.0      30.0      0.0       1.0       2.0         0         1   \n441455     102.0      30.0      0.0       1.0       2.0         0         1   \n\n        _DRNKWEK  _RFDRHV5  DRNKANY5  MENTHLTH  FRUIT1  FVBEANS  FVGREEN  \\\n0              0         1         2        18   310.0    320.0    310.0   \n1              0         1         2         0   305.0    302.0    202.0   \n2          99900         1         1         0   101.0    555.0    101.0   \n3              0         1         2        30   101.0    555.0    301.0   \n4              0         1         2         0   102.0    203.0    204.0   \n...          ...       ...       ...       ...     ...      ...      ...   \n441451         0         1         2         0   555.0    205.0    555.0   \n441452         0         1         2         0   101.0    202.0    303.0   \n441453        93         1         1        20   101.0    555.0    101.0   \n441454         0         1         2         0   101.0    101.0    202.0   \n441455         0         1         2         0   101.0    201.0    201.0   \n\n        FVORANG  VEGETAB1  FRUTDA1_  BEANDAY_  GRENDAY_  ORNGDAY_  VEGEDA1_  \\\n0         305.0     101.0      33.0      67.0      33.0      17.0     100.0   \n1         202.0     304.0      17.0       7.0      29.0      29.0      13.0   \n2         555.0     101.0     100.0       0.0     100.0       0.0     100.0   \n3         301.0     201.0     100.0       0.0       3.0       3.0      14.0   \n4         310.0     320.0     200.0      43.0      57.0      33.0      67.0   \n...         ...       ...       ...       ...       ...       ...       ...   \n441451    201.0     201.0       0.0      71.0       0.0      14.0      14.0   \n441452    201.0     202.0     100.0      29.0      10.0      14.0      29.0   \n441453    555.0     101.0     100.0       0.0     100.0       0.0     100.0   \n441454    301.0     301.0     100.0     100.0      29.0       3.0       3.0   \n441455    201.0     202.0     100.0      14.0      14.0      14.0      29.0   \n\n        _FRUTSUM  _VEGESUM  _FRTLT1  _VEGLT1  BPHIGH4  BPMEDS  BLOODCHO  \\\n0           50.0     217.0        2        1      1.0     1.0         1   \n1           24.0      78.0        2        2      3.0     1.0         1   \n2          100.0     200.0        1        1      3.0     1.0         1   \n3          100.0      20.0        1        2      1.0     1.0         1   \n4          100.0     200.0        1        1      3.0     1.0         1   \n...          ...       ...      ...      ...      ...     ...       ...   \n441451      29.0     200.0        2        2      1.0     1.0         1   \n441452     117.0      82.0        1        2      3.0     1.0         1   \n441453     100.0     200.0        1        1      1.0     1.0         1   \n441454     200.0     135.0        1        1      1.0     1.0         1   \n441455     200.0      71.0        1        2      1.0     1.0         1   \n\n        CHOLCHK  TOLDHI2  CVDINFR4  CVDCRHD4  CVDSTRK3  _MICHD  CHCSCNCR  \\\n0           1.0      1.0         2       2.0         2     2.0       2.0   \n1           4.0      2.0         2       2.0         2     2.0       2.0   \n2           1.0      1.0         7       2.0         1     2.0       2.0   \n3           1.0      1.0         2       2.0         2     2.0       2.0   \n4           1.0      2.0         2       2.0         2     2.0       2.0   \n...         ...      ...       ...       ...       ...     ...       ...   \n441451      1.0      1.0         2       2.0         2     2.0       2.0   \n441452      1.0      2.0         2       2.0         2     2.0       2.0   \n441453      1.0      1.0         2       2.0         2     2.0       2.0   \n441454      1.0      2.0         2       2.0         2     2.0       2.0   \n441455      1.0      1.0         1       2.0         2     1.0       1.0   \n\n        DIABETE3  SMOKE100  SMOKDAY2  USENOW3  _SMOKER3  _RFSMOK3  PHYSHLTH  \n0            3.0       1.0       3.0      3.0         2         1      15.0  \n1            3.0       1.0       1.0      3.0         1         2       0.0  \n2            3.0       2.0       3.0      3.0         2         1      15.0  \n3            3.0       2.0       3.0      3.0         2         1      30.0  \n4            3.0       2.0       3.0      3.0         2         1      20.0  \n...          ...       ...       ...      ...       ...       ...       ...  \n441451       1.0       2.0       3.0      3.0         2         1       0.0  \n441452       3.0       2.0       3.0      3.0         2         1       0.0  \n441453       3.0       1.0       3.0      3.0         2         1       0.0  \n441454       3.0       2.0       3.0      3.0         2         1       0.0  \n441455       1.0       2.0       3.0      3.0         2         1       0.0  \n\n[441456 rows x 57 columns]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 2,
      "metadata": {},
      "id": "ab54b4ff"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import silhouette_score\n",
        "# Define the score function\n",
        "def clustering_score(estimator, X):\n",
        "    labels = estimator.fit_predict(X)\n",
        "    if len(set(labels)) == 1:\n",
        "        return 0.0\n",
        "    else:\n",
        "        return silhouette_score(X, labels)"
      ],
      "outputs": [],
      "execution_count": 8,
      "metadata": {},
      "id": "6c0702cb"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import DBSCAN\n",
        "from sklearn.model_selection import train_test_split, RandomizedSearchCV\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.neighbors import BallTree\n",
        "import numpy as np\n",
        "\n",
        "features = ['_INCOMG', 'GENHLTH', 'EXERANY2', '_RFBING5', '_RFDRHV5', '_VEGLT1',\n",
        "            'BPMEDS', 'BLOODCHO', 'CVDINFR4', 'CVDCRHD4', 'CVDSTRK3', '_MICHD',\n",
        "            'CHCSCNCR', 'DIABETE3', 'SMOKE100', 'SMOKDAY2', 'USENOW3', '_SMOKER3', 'MENTHLTH',\n",
        "            '_RFSMOK3', 'PHYSHLTH']\n",
        "daf = df[features]\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(daf)\n",
        "\n",
        "# Split data into training and testing sets using cross-validation sampling\n",
        "X_train, X_test = train_test_split(X_scaled, test_size=0.1, random_state=42)\n",
        "\n",
        "# Use PCA to reduce the dimensionality of the data to 2 components\n",
        "pca = PCA(n_components=2)\n",
        "X_pca = pca.fit_transform(X_scaled)"
      ],
      "outputs": [],
      "execution_count": 11,
      "metadata": {},
      "id": "679782c2"
    },
    {
      "cell_type": "code",
      "source": [
        "# Compute nearest neighbors using ball tree\n",
        "tree = BallTree(X_pca)\n",
        "min_samples = 10\n",
        "dist, _ = tree.query(X_pca, min_samples)\n",
        "\n"
      ],
      "outputs": [],
      "execution_count": 12,
      "metadata": {},
      "id": "3ce4e74b"
    },
    {
      "cell_type": "code",
      "source": [
        "# Find a suitable epsilon value\n",
        "knn_distances = np.sort(dist, axis=0)[:, -1]\n",
        "eps = np.mean(knn_distances)"
      ],
      "outputs": [],
      "execution_count": 13,
      "metadata": {},
      "id": "884264d4"
    },
    {
      "cell_type": "code",
      "source": [
        "# Set up the parameter grid for DBSCAN\n",
        "param_grid = {'eps': np.linspace(0.1, 1.0, 10),\n",
        "              'min_samples': np.arange(5, 20)\n",
        "}"
      ],
      "outputs": [],
      "execution_count": 14,
      "metadata": {},
      "id": "b9882478"
    },
    {
      "cell_type": "code",
      "source": [
        "# Create the RandomizedSearchCV object with the custom score function\n",
        "dbscan = DBSCAN()\n",
        "dbscan_random = RandomizedSearchCV(dbscan, param_grid, scoring=clustering_score, n_iter=100, cv=5, random_state=42)\n",
        "\n"
      ],
      "outputs": [],
      "execution_count": 15,
      "metadata": {},
      "id": "66552d88"
    },
    {
      "cell_type": "code",
      "source": [
        "# Fit the model and print the best parameters and score\n",
        "dbscan_random.fit(X_pca)\n",
        "print('Best parameters:', dbscan_random.best_params_)\n",
        "print('Best score:', dbscan_random.best_score_)\n"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {},
      "id": "78a658f6"
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {},
      "id": "bdc85a79"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import MiniBatchKMeans\n",
        "from sklearn.pipeline import Pipeline\n",
        "\n",
        "\n",
        "features = ['_INCOMG', 'GENHLTH', 'EXERANY2', '_RFBING5', '_RFDRHV5', '_VEGLT1',\n",
        "            'BPMEDS', 'BLOODCHO', 'CVDINFR4', 'CVDCRHD4', 'CVDSTRK3', '_MICHD',\n",
        "            'CHCSCNCR', 'DIABETE3', 'SMOKE100', 'SMOKDAY2', 'USENOW3', '_SMOKER3', 'MENTHLTH',\n",
        "            '_RFSMOK3', 'PHYSHLTH']\n",
        "daf = df[features]\n",
        "\n",
        "# Standardize the data\n",
        "df_std = (daf - daf.mean()) / daf.std() \n",
        "\n",
        "# Define the PCA and clustering pipeline\n",
        "pca_kmeans_pipeline = Pipeline([\n",
        "    ('pca', PCA(n_components=2)),\n",
        "    ('kmeans', MiniBatchKMeans(n_clusters=3, init='k-means++', random_state=42))\n",
        "])\n",
        "\n",
        "# Fit the pipeline to the standardized data\n",
        "kmeans_model = pca_kmeans_pipeline.fit_predict(df_std)\n",
        "# Visualize the clusters\n",
        "plt.scatter(pca_kmeans_pipeline.named_steps['pca'].transform(df_std)[:, 0],\n",
        "            pca_kmeans_pipeline.named_steps['pca'].transform(df_std)[:, 1],\n",
        "            c=kmeans_model, cmap='viridis')\n",
        "plt.xlabel('PC1')\n",
        "plt.ylabel('PC2')\n",
        "plt.title('Behavioral Segmentation Clustering')\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 12,
          "data": {
            "text/plain": "<matplotlib.collections.PathCollection at 0x2040a07dee0>"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 12,
          "data": {
            "text/plain": "Text(0.5, 0, 'PC1')"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 12,
          "data": {
            "text/plain": "Text(0, 0.5, 'PC2')"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 12,
          "data": {
            "text/plain": "Text(0.5, 1.0, 'Behavioral Segmentation Clustering')"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 12,
      "metadata": {},
      "id": "df1461f2"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import silhouette_score, calinski_harabasz_score, davies_bouldin_score\n",
        "\n",
        "#kmeans_silhouette = silhouette_score(daf, kmeans_model)\n",
        "kmeans_calinski = calinski_harabasz_score(daf, kmeans_model)\n",
        "kmeans_davies = davies_bouldin_score(daf, kmeans_model)\n",
        "\n",
        "#print(\"KMeans - Silhouette Coefficient: \", kmeans_silhouette)\n",
        "print(\"KMeans - Calinski-Harabasz Index: \", kmeans_calinski)\n",
        "print(\"KMeans - Davies-Bouldin Index: \", kmeans_davies)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "KMeans - Calinski-Harabasz Index:  21508.62988258449\nKMeans - Davies-Bouldin Index:  3.5792976800787124\n"
        }
      ],
      "execution_count": 16,
      "metadata": {},
      "id": "ee963f7f"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import DBSCAN\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.neighbors import BallTree\n",
        "import numpy as np\n",
        "\n",
        "features = ['_INCOMG', 'GENHLTH', 'EXERANY2', '_RFBING5', '_RFDRHV5', '_VEGLT1',\n",
        "            'BPMEDS', 'BLOODCHO', 'CVDINFR4', 'CVDCRHD4', 'CVDSTRK3', '_MICHD',\n",
        "            'CHCSCNCR', 'DIABETE3', 'SMOKE100', 'SMOKDAY2', 'USENOW3', '_SMOKER3', 'MENTHLTH',\n",
        "            '_RFSMOK3', 'PHYSHLTH']\n",
        "daf = df[features]\n",
        "\n",
        "#sample_size = 50000\n",
        "#df_sample = daf.sample(n=sample_size, random_state=42)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(daf)\n",
        "\n",
        "# Split data into training and testing sets using cross-validation sampling\n",
        "X_train, X_test = train_test_split(X_scaled, test_size=0.1, random_state=42)\n",
        "\n",
        "# Use PCA to reduce the dimensionality of the data to 2 components\n",
        "pca = PCA(n_components=2)\n",
        "X_pca = pca.fit_transform(X_scaled)\n",
        "\n"
      ],
      "outputs": [],
      "execution_count": 17,
      "metadata": {},
      "id": "50c063d9"
    },
    {
      "cell_type": "code",
      "source": [
        "# Compute nearest neighbors using ball tree\n",
        "tree = BallTree(X_pca)\n",
        "min_samples = 10\n",
        "dist, _ = tree.query(X_pca, min_samples)\n"
      ],
      "outputs": [],
      "execution_count": 18,
      "metadata": {},
      "id": "054f64c3"
    },
    {
      "cell_type": "code",
      "source": [
        "# Find a suitable epsilon value\n",
        "knn_distances = np.sort(dist, axis=0)[:, -1]\n",
        "eps = np.mean(knn_distances)"
      ],
      "outputs": [],
      "execution_count": 19,
      "metadata": {},
      "id": "b8191d28"
    },
    {
      "cell_type": "code",
      "source": [
        "# Cluster the data using DBSCAN\n",
        "dbscan = DBSCAN(eps=eps, min_samples=min_samples)\n",
        "dbscan_model = dbscan.fit_predict(X_pca)"
      ],
      "outputs": [],
      "execution_count": 20,
      "metadata": {},
      "id": "c592e7b5"
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the clustering results\n",
        "n_clusters = len(set(dbscan_model)) - (1 if -1 in dbscan_model else 0)\n",
        "n_noise = list(dbscan_model).count(-1)\n",
        "\n",
        "print('Estimated number of clusters: %d' % n_clusters)\n",
        "print('Estimated number of noise points: %d' % n_noise)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Estimated number of clusters: 4795\nEstimated number of noise points: 119508\n"
        }
      ],
      "execution_count": 21,
      "metadata": {},
      "id": "9235c730"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import silhouette_score, calinski_harabasz_score, davies_bouldin_score\n",
        "\n",
        "#dbscan_silhouette = silhouette_score(daf, dbscan.labels_)\n",
        "dbscan_calinski = calinski_harabasz_score(daf, dbscan.labels_)\n",
        "dbscan_davies = davies_bouldin_score(daf, dbscan.labels_)\n",
        "\n",
        "#print(\"dbscan - Silhouette Coefficient: \", dbscan_silhouette)\n",
        "print(\"dbscan - Calinski-Harabasz Index: \", dbscan_calinski)\n",
        "print(\"dbscan - Davies-Bouldin Index: \", dbscan_davies)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "dbscan - Calinski-Harabasz Index:  43.97374790730895\ndbscan - Davies-Bouldin Index:  10.466959892147619\n"
        }
      ],
      "execution_count": 11,
      "metadata": {},
      "id": "f855f913"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import DBSCAN\n",
        "from sklearn.cluster import DBSCAN\n",
        "from sklearn.model_selection import train_test_split\n",
        "import numpy as np\n",
        "from sklearn.metrics import pairwise_distances\n",
        "\n",
        "\n",
        "features = ['_INCOMG', 'GENHLTH', 'EXERANY2', '_RFBING5', '_RFDRHV5', '_VEGLT1',\n",
        "       'BPMEDS', 'BLOODCHO', 'CVDINFR4', 'CVDCRHD4', 'CVDSTRK3', '_MICHD',\n",
        "       'CHCSCNCR', 'DIABETE3', 'SMOKE100', 'SMOKDAY2', 'USENOW3', '_SMOKER3', 'MENTHLTH',\n",
        "       '_RFSMOK3', 'PHYSHLTH']\n",
        "daf = df[features]\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(daf)\n",
        "\n",
        "# Split data into training and testing sets using cross-validation sampling\n",
        "X_train, X_test = train_test_split(X_scaled, test_size=0.1, random_state=42)\n",
        "\n",
        "# Use PCA to reduce the dimensionality of the data to 2 components\n",
        "pca = PCA(n_components=2)\n",
        "X_pca = pca.fit_transform(X_scaled)\n",
        "\n",
        "# Compute a distance matrix\n",
        "dist = pairwise_distances(X_scaled)\n",
        "\n",
        "# Find a suitable epsilon value\n",
        "min_samples = 10\n",
        "knn_distances = np.sort(dist, axis=0)[:, min_samples]\n",
        "knn_distances = knn_distances[knn_distances != 0]\n",
        "eps = np.mean(knn_distances)\n",
        "\n",
        "# Cluster the data using DBSCAN\n",
        "dbscan = DBSCAN(eps=eps, min_samples=min_samples)\n",
        "dbscan_model = dbscan.fit_predict(X_scaled)\n",
        "\n",
        "# Evaluate the clustering results\n",
        "n_clusters = len(set(dbscan_model)) - (1 if -1 in dbscan_model else 0)\n",
        "n_noise = list(dbscan_model).count(-1)\n",
        "\n",
        "print('Estimated number of clusters: %d' % n_clusters)\n",
        "print('Estimated number of noise points: %d' % n_noise)"
      ],
      "outputs": [
        {
          "output_type": "error",
          "ename": "MemoryError",
          "evalue": "Unable to allocate 1.42 TiB for an array with shape (441456, 441456) and data type float64",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mMemoryError\u001b[0m                               Traceback (most recent call last)",
            "\u001b[1;32m<ipython-input-4-c2cde3c09182>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     23\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     24\u001b[0m \u001b[1;31m# Compute a distance matrix\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 25\u001b[1;33m \u001b[0mdist\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpairwise_distances\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_scaled\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     26\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     27\u001b[0m \u001b[1;31m# Find a suitable epsilon value\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mc:\\Anaconda\\lib\\site-packages\\sklearn\\utils\\validation.py\u001b[0m in \u001b[0;36minner_f\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m     61\u001b[0m             \u001b[0mextra_args\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mall_args\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     62\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mextra_args\u001b[0m \u001b[1;33m<=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 63\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     64\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     65\u001b[0m             \u001b[1;31m# extra_args > 0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mc:\\Anaconda\\lib\\site-packages\\sklearn\\metrics\\pairwise.py\u001b[0m in \u001b[0;36mpairwise_distances\u001b[1;34m(X, Y, metric, n_jobs, force_all_finite, **kwds)\u001b[0m\n\u001b[0;32m   1788\u001b[0m         \u001b[0mfunc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpartial\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdistance\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcdist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmetric\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mmetric\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1789\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1790\u001b[1;33m     \u001b[1;32mreturn\u001b[0m \u001b[0m_parallel_pairwise\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mY\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1791\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1792\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mc:\\Anaconda\\lib\\site-packages\\sklearn\\metrics\\pairwise.py\u001b[0m in \u001b[0;36m_parallel_pairwise\u001b[1;34m(X, Y, func, n_jobs, **kwds)\u001b[0m\n\u001b[0;32m   1357\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1358\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0meffective_n_jobs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1359\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mY\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1360\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1361\u001b[0m     \u001b[1;31m# enforce a threading backend to prevent data communication overhead\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mc:\\Anaconda\\lib\\site-packages\\sklearn\\utils\\validation.py\u001b[0m in \u001b[0;36minner_f\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m     61\u001b[0m             \u001b[0mextra_args\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mall_args\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     62\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mextra_args\u001b[0m \u001b[1;33m<=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 63\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     64\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     65\u001b[0m             \u001b[1;31m# extra_args > 0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mc:\\Anaconda\\lib\\site-packages\\sklearn\\metrics\\pairwise.py\u001b[0m in \u001b[0;36meuclidean_distances\u001b[1;34m(X, Y, Y_norm_squared, squared, X_norm_squared)\u001b[0m\n\u001b[0;32m    311\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    312\u001b[0m         \u001b[1;31m# if dtype is already float64, no need to chunk and upcast\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 313\u001b[1;33m         \u001b[0mdistances\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m-\u001b[0m \u001b[1;36m2\u001b[0m \u001b[1;33m*\u001b[0m \u001b[0msafe_sparse_dot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mY\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mT\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdense_output\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    314\u001b[0m         \u001b[0mdistances\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[0mXX\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    315\u001b[0m         \u001b[0mdistances\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[0mYY\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mc:\\Anaconda\\lib\\site-packages\\sklearn\\utils\\validation.py\u001b[0m in \u001b[0;36minner_f\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m     61\u001b[0m             \u001b[0mextra_args\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mall_args\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     62\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mextra_args\u001b[0m \u001b[1;33m<=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 63\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     64\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     65\u001b[0m             \u001b[1;31m# extra_args > 0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;32mc:\\Anaconda\\lib\\site-packages\\sklearn\\utils\\extmath.py\u001b[0m in \u001b[0;36msafe_sparse_dot\u001b[1;34m(a, b, dense_output)\u001b[0m\n\u001b[0;32m    150\u001b[0m             \u001b[0mret\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mb\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    151\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 152\u001b[1;33m         \u001b[0mret\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0ma\u001b[0m \u001b[1;33m@\u001b[0m \u001b[0mb\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    153\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    154\u001b[0m     if (sparse.issparse(a) and sparse.issparse(b)\n",
            "\u001b[1;31mMemoryError\u001b[0m: Unable to allocate 1.42 TiB for an array with shape (441456, 441456) and data type float64"
          ]
        }
      ],
      "execution_count": 4,
      "metadata": {},
      "id": "37d313ea"
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "The first experiment was to work with dbscan algorithm but it was very consumming when it comes to computation so i had to optimise using Ball Tree to search for the nearest neighbors and i got a large number of clusters which is 4795, so i decided to work with a random sample. However we still got a large number of clusters which is not logical (246 clusters)"
      ],
      "metadata": {},
      "id": "6b94d5b9"
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualize the clustering\n",
        "labels = dbscan.labels_\n",
        "n_clusters = len(set(labels)) - (1 if -1 in labels else 0)\n",
        "colors = plt.cm.get_cmap('viridis', n_clusters)\n",
        "\n",
        "for i in range(n_clusters):\n",
        "    if i == -1:\n",
        "        # Black used for noise.\n",
        "        color = 'k'\n",
        "    else:\n",
        "        color = colors(i)\n",
        "    # Plot the points in each cluster\n",
        "    plt.scatter(X_pca[labels == i, 0], X_pca[labels == i, 1], s=10, c=color, alpha=0.5, label='Cluster {}'.format(i))\n",
        "\n",
        "plt.title('DBSCAN Clustering of LLCP2015 Dataset')\n",
        "plt.xlabel('PC1')\n",
        "plt.ylabel('PC2')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'dbscan' is not defined",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[1;32m<ipython-input-1-c1d6b1de7f73>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# Visualize the clustering\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mlabels\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdbscan\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlabels_\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mn_clusters\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mset\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m-\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m \u001b[1;32mif\u001b[0m \u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mlabels\u001b[0m \u001b[1;32melse\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mcolors\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcm\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_cmap\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'viridis'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn_clusters\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;31mNameError\u001b[0m: name 'dbscan' is not defined"
          ]
        }
      ],
      "execution_count": 1,
      "metadata": {},
      "id": "04a0aae2"
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "There are many feature selection techniques available, each with their own strengths and weaknesses. Here is an example of using the mutual information feature selection technique to select the most important features for clustering"
      ],
      "metadata": {},
      "id": "6fd6409e"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_selection import SelectKBest, mutual_info_classif\n",
        "\n",
        "# Separate target variable from features\n",
        "X = df.drop('MENTHLTH', axis=1)\n",
        "y = df['MENTHLTH']"
      ],
      "outputs": [],
      "execution_count": 3,
      "metadata": {},
      "id": "894273f7"
    },
    {
      "cell_type": "code",
      "source": [
        "# Select top k features using mutual information score\n",
        "k = 20\n",
        "selector = SelectKBest(mutual_info_classif, k=k)\n",
        "selector.fit(X, y)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 5,
          "data": {
            "text/plain": "SelectKBest(k=20,\n            score_func=<function mutual_info_classif at 0x000002AAB65FD5E0>)"
          },
          "metadata": {}
        }
      ],
      "execution_count": 5,
      "metadata": {},
      "id": "f96b5d4e"
    },
    {
      "cell_type": "code",
      "source": [
        "# Get selected feature indices and names\n",
        "selected_features = X.columns[selector.get_support()]\n",
        "print('Selected features:', selected_features)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Selected features: Index(['_INCOMG', 'GENHLTH', 'EXERANY2', '_RFBING5', '_RFDRHV5', '_VEGLT1',\n       'BPMEDS', 'BLOODCHO', 'CVDINFR4', 'CVDCRHD4', 'CVDSTRK3', '_MICHD',\n       'CHCSCNCR', 'DIABETE3', 'SMOKE100', 'SMOKDAY2', 'USENOW3', '_SMOKER3',\n       '_RFSMOK3', 'PHYSHLTH'],\n      dtype='object')\n"
        }
      ],
      "execution_count": 6,
      "metadata": {},
      "id": "9f7d6a44"
    },
    {
      "cell_type": "code",
      "source": [
        "#features = ['_BMI5','SEX','_AGEG5YR','MARITAL','EXEROFT1','MAXDRNKS','SMOKDAY2','PHYSHLTH','VEGETAB1','FRUIT1','MENTHLTH','GENHLTH','EDUCA','_INCOMG']\n",
        "features = ['_INCOMG', 'GENHLTH', 'EXERANY2', '_RFBING5', '_RFDRHV5', '_VEGLT1',\n",
        "       'BPMEDS', 'BLOODCHO', 'CVDINFR4', 'CVDCRHD4', 'CVDSTRK3', '_MICHD',\n",
        "       'CHCSCNCR', 'DIABETE3', 'SMOKE100', 'SMOKDAY2', 'USENOW3', '_SMOKER3', 'MENTHLTH',\n",
        "       '_RFSMOK3', 'PHYSHLTH']\n",
        "#features = ['SEX','MARITAL','EDUCA','_INCOMG','_BMI5','_AGEG5YR','GENHLTH','EXERANY2','MENTHLTH','EXRACT21','ALCDAY5','_RFBING5','FRUIT1','FVGREEN','FVORANG','_FRTLT1','SMOKE100','SMOKDAY2','_SMOKER3','_RFSMOK3','PHYSHLTH']\n",
        "daf = df[features]\n",
        "\n",
        "# Standardize the data\n",
        "df_std = (daf - daf.mean()) / daf.std()\n",
        "\n",
        "# Apply PCA to reduce dimensionality\n",
        "pca = PCA(n_components=3)\n",
        "df_pca = pd.DataFrame(pca.fit_transform(df_std), columns=['PC1', 'PC2','PC3'])\n",
        "\n",
        "# Determine the optimal number of clusters using elbow method\n",
        "wcss = []\n",
        "for i in range(1, 11):\n",
        "    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)\n",
        "    kmeans.fit(df_pca)\n",
        "    wcss.append(kmeans.inertia_)\n",
        "from yellowbrick.cluster import KElbowVisualizer\n",
        "visualizer = KElbowVisualizer(kmeans, k=(1, 11))\n",
        "\n",
        "# Fit the data to the visualizer\n",
        "visualizer.fit(df_pca)\n",
        "\n",
        "# Visualize the elbow curve\n",
        "visualizer.show()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "KMeans(n_clusters=1, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "KMeans(n_clusters=2, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "KMeans(n_clusters=3, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "KMeans(n_clusters=4, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "KMeans(n_clusters=5, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "KMeans(n_clusters=6, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "KMeans(n_clusters=7, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "KMeans(random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "KMeans(n_clusters=9, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "KMeans(n_clusters=10, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "[<matplotlib.lines.Line2D at 0x2040a018400>]"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "Text(0.5, 1.0, 'Elbow Method')"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "Text(0.5, 0, 'Number of clusters')"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "Text(0, 0.5, 'WCSS')"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 17,
      "metadata": {},
      "id": "43139073"
    },
    {
      "cell_type": "code",
      "source": [
        "kmeans = KMeans(n_clusters=4, init='k-means++', random_state=42)\n",
        "kmodel = kmeans.fit_predict(df_pca)\n",
        "\n",
        "# Visualize the clusters\n",
        "plt.scatter(df_pca['PC1'], df_pca['PC2'], c=kmodel, cmap='viridis')\n",
        "plt.xlabel('PC1')\n",
        "plt.ylabel('PC2')\n",
        "plt.title('Behavioral Segmentation Clustering')\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 21,
          "data": {
            "text/plain": "<matplotlib.collections.PathCollection at 0x2040914b160>"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 21,
          "data": {
            "text/plain": "Text(0.5, 0, 'PC1')"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 21,
          "data": {
            "text/plain": "Text(0, 0.5, 'PC2')"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 21,
          "data": {
            "text/plain": "Text(0.5, 1.0, 'Behavioral Segmentation Clustering')"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 21,
      "metadata": {},
      "id": "61201d5d"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import silhouette_score, calinski_harabasz_score, davies_bouldin_score\n",
        "\n",
        "#kmeans_silhouette = silhouette_score(daf, kmodel)\n",
        "kmeans_calinski = calinski_harabasz_score(daf, kmodel)\n",
        "kmeans_davies = davies_bouldin_score(daf, kmodel)\n",
        "\n",
        "#print(\"KMeans - Silhouette Coefficient: \", kmeans_silhouette)\n",
        "print(\"KMeans - Calinski-Harabasz Index: \", kmeans_calinski)\n",
        "print(\"KMeans - Davies-Bouldin Index: \", kmeans_davies)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "KMeans - Calinski-Harabasz Index:  25174.75987218409\nKMeans - Davies-Bouldin Index:  5.856800299420184\n"
        }
      ],
      "execution_count": 22,
      "metadata": {},
      "id": "71cb91b6"
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a new dataframe with the original features and the cluster labels\n",
        "clustered_data = pd.concat([daf.reset_index(drop=True), pd.DataFrame({'cluster': kmeans.labels_})], axis=1)\n",
        "\n",
        "# Calculate the size of each cluster\n",
        "cluster_sizes = clustered_data['cluster'].value_counts().sort_index()\n",
        "\n",
        "# Print the size of each cluster\n",
        "print('Cluster Sizes:')\n",
        "for i in range(len(cluster_sizes)):\n",
        "    print(f'Cluster {i}: {cluster_sizes[i]}')\n",
        "\n",
        "# Calculate the mean values of each feature for each cluster\n",
        "cluster_means = clustered_data.groupby('cluster').mean()\n",
        "\n",
        "# Print the mean values of each feature for each cluster\n",
        "print('\\nCluster Means:')\n",
        "print(cluster_means)\n",
        "\n",
        "#for i in range(kmeans.n_clusters):\n",
        "#    cluster = clustered_data.loc[clustered_data['cluster'] == i]\n",
        "#    profile = ProfileReport(cluster, title=f\"Cluster {i} Profile Report\", explorative=True)\n",
        "#    profile.to_file(f\"clustering12_{i}_profile.html\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Cluster Sizes:\nCluster 0: 35074\nCluster 1: 89186\nCluster 2: 58477\nCluster 3: 258719\n\nCluster Means:\n          _INCOMG   GENHLTH  EXERANY2  _RFBING5  _RFDRHV5   _VEGLT1    BPMEDS  \\\ncluster                                                                         \n0        3.555255  3.428066  1.345897  1.045105  1.025689  1.211097  1.049752   \n1        3.141367  3.491434  1.504765  1.028872  1.009553  1.317202  1.086415   \n2        3.412521  2.883920  1.340818  1.230364  1.108162  1.249021  1.099697   \n3        4.416479  2.067026  1.117363  1.127466  1.054063  1.117974  1.052377   \n\n         BLOODCHO  CVDINFR4  CVDCRHD4  CVDSTRK3    _MICHD  CHCSCNCR  DIABETE3  \\\ncluster                                                                         \n0        1.069624  1.352968  1.303159  1.846040  1.000000  1.818241  2.354365   \n1        1.262967  2.076043  1.996939  1.957202  1.996289  1.902787  2.390891   \n2        1.366999  1.985533  1.990783  1.975221  1.947467  1.945927  2.796912   \n3        1.224147  2.005705  1.999857  1.992760  1.999397  1.908901  2.916570   \n\n         SMOKE100  SMOKDAY2   USENOW3  _SMOKER3  MENTHLTH  _RFSMOK3   PHYSHLTH  \ncluster                                                                         \n0        1.445031  2.854679  2.957091  1.911473  5.757313  1.088527   9.053658  \n1        1.638867  3.000000  2.962786  2.000000  9.491736  1.000000  10.661068  \n2        1.000000  1.288780  2.911965  1.000017  7.137456  1.999983   5.895378  \n3        1.713399  3.000000  2.956992  2.000000  1.439635  1.000000   0.927396  \n"
        }
      ],
      "execution_count": 26,
      "metadata": {},
      "id": "92f7891b"
    },
    {
      "cell_type": "code",
      "source": [
        "cluster_labels = kmeans.labels_\n",
        "print(cluster_labels)\n",
        "import matplotlib.pyplot as plt\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "\n",
        "\n",
        "fig = plt.figure(figsize=(10,10))\n",
        "ax = fig.add_subplot(111, projection='3d')\n",
        "\n",
        "# Plotting the clusters\n",
        "scatter = ax.scatter(df_pca['PC1'], df_pca['PC2'], df_pca['PC3'], c=cluster_labels, cmap='rainbow', alpha=0.5)\n",
        "\n",
        "# Setting labels for the plot\n",
        "ax.set_xlabel('PC1')\n",
        "ax.set_ylabel('PC2')\n",
        "ax.set_zlabel('PC3')\n",
        "\n",
        "# Adding a colorbar\n",
        "plt.colorbar(scatter)\n",
        "\n",
        "# Displaying the plot\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "[1 2 1 ... 1 1 0]\n"
        },
        {
          "output_type": "execute_result",
          "execution_count": 27,
          "data": {
            "text/plain": "Text(0.5, 0, 'PC1')"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 27,
          "data": {
            "text/plain": "Text(0.5, 0, 'PC2')"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 27,
          "data": {
            "text/plain": "Text(0.5, 0, 'PC3')"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 27,
          "data": {
            "text/plain": "<matplotlib.colorbar.Colorbar at 0x2aa86ef8880>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "",
            "text/plain": "<Figure size 720x720 with 2 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 27,
      "metadata": {},
      "id": "02ba65be"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "cluster_labels = kmeans.labels_\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(daf.drop('MENTHLTH', axis=1), cluster_labels, test_size=0.2, random_state=42)\n",
        "\n",
        "# Train a classifier on the training set\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "clf = DecisionTreeClassifier(random_state=42)\n",
        "clf.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the testing set\n",
        "y_pred = clf.predict(X_test)\n",
        "\n",
        "# Evaluate accuracy of predictions\n",
        "acc = accuracy_score(y_test, y_pred)\n",
        "print(f\"Accuracy: {acc}\")"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 14,
          "data": {
            "text/plain": "DecisionTreeClassifier(random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Accuracy: 0.9762492638064604\n"
        }
      ],
      "execution_count": 14,
      "metadata": {},
      "id": "c44a6ebc"
    },
    {
      "cell_type": "code",
      "source": [
        "#features = ['_BMI5','SEX','_AGEG5YR','MARITAL','EXEROFT1','MAXDRNKS','SMOKDAY2','PHYSHLTH','VEGETAB1','FRUIT1','MENTHLTH','GENHLTH','EDUCA','_INCOMG']\n",
        "features = ['_INCOMG', 'GENHLTH', 'EXERANY2', '_RFBING5', '_RFDRHV5', '_VEGLT1',\n",
        "       'BPMEDS', 'BLOODCHO', 'CVDINFR4', 'CVDCRHD4', 'CVDSTRK3', '_MICHD',\n",
        "       'CHCSCNCR', 'DIABETE3', 'SMOKE100', 'SMOKDAY2', 'USENOW3', '_SMOKER3', 'MENTHLTH',\n",
        "       '_RFSMOK3', 'PHYSHLTH']\n",
        "daf = df[features]\n",
        "\n",
        "# Standardize the data\n",
        "df_std = (daf - daf.mean()) / daf.std()\n",
        "\n",
        "# Apply PCA to reduce dimensionality\n",
        "pca = PCA(n_components=3)\n",
        "df_pca = pd.DataFrame(pca.fit_transform(df_std), columns=['PC1', 'PC2','PC3'])\n",
        "\n",
        "# Determine the optimal number of clusters using elbow method\n",
        "wcss = []\n",
        "for i in range(1, 11):\n",
        "    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)\n",
        "    kmeans.fit(df_pca)\n",
        "    wcss.append(kmeans.inertia_)\n",
        "from yellowbrick.cluster import KElbowVisualizer\n",
        "visualizer = KElbowVisualizer(kmeans, k=(1, 11))\n",
        "\n",
        "# Fit the data to the visualizer\n",
        "visualizer.fit(df_pca)\n",
        "\n",
        "# Visualize the elbow curve\n",
        "visualizer.show()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "KMeans(n_clusters=1, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "KMeans(n_clusters=2, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "KMeans(n_clusters=3, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "KMeans(n_clusters=4, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "KMeans(n_clusters=5, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "KMeans(n_clusters=6, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "KMeans(n_clusters=7, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "KMeans(random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "KMeans(n_clusters=9, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "KMeans(n_clusters=10, random_state=42)"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "[<matplotlib.lines.Line2D at 0x2aa867bc3a0>]"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "Text(0.5, 1.0, 'Elbow Method')"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "Text(0.5, 0, 'Number of clusters')"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "Text(0, 0.5, 'WCSS')"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 20,
      "metadata": {},
      "id": "d5000133"
    },
    {
      "cell_type": "code",
      "source": [
        "# Train a KMeans model with 4 clusters\n",
        "kmeans = KMeans(n_clusters=4, random_state=0).fit(df_pca)"
      ],
      "outputs": [],
      "execution_count": 21,
      "metadata": {},
      "id": "1c9103d4"
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 15,
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Patient_ID</th>\n      <th>SEX</th>\n      <th>MARITAL</th>\n      <th>EDUCA</th>\n      <th>WEIGHT2</th>\n      <th>HEIGHT3</th>\n      <th>_INCOMG</th>\n      <th>_BMI5</th>\n      <th>_AGEG5YR</th>\n      <th>GENHLTH</th>\n      <th>EXERANY2</th>\n      <th>EXRACT11</th>\n      <th>EXEROFT1</th>\n      <th>EXERHMM1</th>\n      <th>EXRACT21</th>\n      <th>EXEROFT2</th>\n      <th>EXERHMM2</th>\n      <th>ALCDAY5</th>\n      <th>AVEDRNK2</th>\n      <th>MAXDRNKS</th>\n      <th>DROCDY3_</th>\n      <th>_RFBING5</th>\n      <th>_DRNKWEK</th>\n      <th>_RFDRHV5</th>\n      <th>DRNKANY5</th>\n      <th>MENTHLTH</th>\n      <th>FRUIT1</th>\n      <th>FVBEANS</th>\n      <th>FVGREEN</th>\n      <th>FVORANG</th>\n      <th>VEGETAB1</th>\n      <th>FRUTDA1_</th>\n      <th>BEANDAY_</th>\n      <th>GRENDAY_</th>\n      <th>ORNGDAY_</th>\n      <th>VEGEDA1_</th>\n      <th>_FRUTSUM</th>\n      <th>_VEGESUM</th>\n      <th>_FRTLT1</th>\n      <th>_VEGLT1</th>\n      <th>BPHIGH4</th>\n      <th>BPMEDS</th>\n      <th>BLOODCHO</th>\n      <th>CHOLCHK</th>\n      <th>TOLDHI2</th>\n      <th>CVDINFR4</th>\n      <th>CVDCRHD4</th>\n      <th>CVDSTRK3</th>\n      <th>_MICHD</th>\n      <th>CHCSCNCR</th>\n      <th>DIABETE3</th>\n      <th>SMOKE100</th>\n      <th>SMOKDAY2</th>\n      <th>USENOW3</th>\n      <th>_SMOKER3</th>\n      <th>_RFSMOK3</th>\n      <th>PHYSHLTH</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>4</td>\n      <td>280.0</td>\n      <td>510.0</td>\n      <td>2</td>\n      <td>4018.0</td>\n      <td>9</td>\n      <td>5.0</td>\n      <td>2.0</td>\n      <td>52.432544</td>\n      <td>103.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>18</td>\n      <td>310.0</td>\n      <td>320.0</td>\n      <td>310.0</td>\n      <td>305.0</td>\n      <td>101.0</td>\n      <td>33.0</td>\n      <td>67.0</td>\n      <td>33.0</td>\n      <td>17.0</td>\n      <td>100.0</td>\n      <td>50.0</td>\n      <td>217.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>6</td>\n      <td>165.0</td>\n      <td>508.0</td>\n      <td>1</td>\n      <td>2509.0</td>\n      <td>7</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>64.000000</td>\n      <td>212.0</td>\n      <td>100.0</td>\n      <td>69.0</td>\n      <td>212.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>305.0</td>\n      <td>302.0</td>\n      <td>202.0</td>\n      <td>202.0</td>\n      <td>304.0</td>\n      <td>17.0</td>\n      <td>7.0</td>\n      <td>29.0</td>\n      <td>29.0</td>\n      <td>13.0</td>\n      <td>24.0</td>\n      <td>78.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>158.0</td>\n      <td>511.0</td>\n      <td>5</td>\n      <td>2204.0</td>\n      <td>11</td>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>52.432544</td>\n      <td>103.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>900</td>\n      <td>1</td>\n      <td>99900</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>101.0</td>\n      <td>555.0</td>\n      <td>101.0</td>\n      <td>555.0</td>\n      <td>101.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n      <td>100.0</td>\n      <td>100.0</td>\n      <td>200.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>7</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>2</td>\n      <td>1</td>\n      <td>4</td>\n      <td>180.0</td>\n      <td>507.0</td>\n      <td>5</td>\n      <td>2819.0</td>\n      <td>9</td>\n      <td>5.0</td>\n      <td>2.0</td>\n      <td>52.432544</td>\n      <td>103.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>30</td>\n      <td>101.0</td>\n      <td>555.0</td>\n      <td>301.0</td>\n      <td>301.0</td>\n      <td>201.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>14.0</td>\n      <td>100.0</td>\n      <td>20.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>30.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>2</td>\n      <td>1</td>\n      <td>5</td>\n      <td>142.0</td>\n      <td>504.0</td>\n      <td>5</td>\n      <td>2437.0</td>\n      <td>9</td>\n      <td>5.0</td>\n      <td>2.0</td>\n      <td>52.432544</td>\n      <td>103.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>102.0</td>\n      <td>203.0</td>\n      <td>204.0</td>\n      <td>310.0</td>\n      <td>320.0</td>\n      <td>200.0</td>\n      <td>43.0</td>\n      <td>57.0</td>\n      <td>33.0</td>\n      <td>67.0</td>\n      <td>100.0</td>\n      <td>200.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>20.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>441451</th>\n      <td>441452</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n      <td>104.0</td>\n      <td>503.0</td>\n      <td>2</td>\n      <td>1842.0</td>\n      <td>11</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>52.432544</td>\n      <td>103.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>555.0</td>\n      <td>205.0</td>\n      <td>555.0</td>\n      <td>201.0</td>\n      <td>201.0</td>\n      <td>0.0</td>\n      <td>71.0</td>\n      <td>0.0</td>\n      <td>14.0</td>\n      <td>14.0</td>\n      <td>29.0</td>\n      <td>200.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>441452</th>\n      <td>441453</td>\n      <td>2</td>\n      <td>1</td>\n      <td>5</td>\n      <td>160.0</td>\n      <td>503.0</td>\n      <td>1</td>\n      <td>2834.0</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>64.000000</td>\n      <td>105.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>101.0</td>\n      <td>202.0</td>\n      <td>303.0</td>\n      <td>201.0</td>\n      <td>202.0</td>\n      <td>100.0</td>\n      <td>29.0</td>\n      <td>10.0</td>\n      <td>14.0</td>\n      <td>29.0</td>\n      <td>117.0</td>\n      <td>82.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>441453</th>\n      <td>441454</td>\n      <td>2</td>\n      <td>1</td>\n      <td>4</td>\n      <td>247.0</td>\n      <td>505.0</td>\n      <td>3</td>\n      <td>4110.0</td>\n      <td>11</td>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>52.432544</td>\n      <td>103.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>202.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>93</td>\n      <td>1</td>\n      <td>1</td>\n      <td>20</td>\n      <td>101.0</td>\n      <td>555.0</td>\n      <td>101.0</td>\n      <td>555.0</td>\n      <td>101.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n      <td>100.0</td>\n      <td>0.0</td>\n      <td>100.0</td>\n      <td>100.0</td>\n      <td>200.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>441454</th>\n      <td>441455</td>\n      <td>1</td>\n      <td>5</td>\n      <td>5</td>\n      <td>166.0</td>\n      <td>511.0</td>\n      <td>1</td>\n      <td>2315.0</td>\n      <td>7</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>52.432544</td>\n      <td>103.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>101.0</td>\n      <td>101.0</td>\n      <td>202.0</td>\n      <td>301.0</td>\n      <td>301.0</td>\n      <td>100.0</td>\n      <td>100.0</td>\n      <td>29.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>200.0</td>\n      <td>135.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>441455</th>\n      <td>441456</td>\n      <td>2</td>\n      <td>1</td>\n      <td>6</td>\n      <td>135.0</td>\n      <td>502.0</td>\n      <td>1</td>\n      <td>2469.0</td>\n      <td>9</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>64.000000</td>\n      <td>103.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>102.0</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>101.0</td>\n      <td>201.0</td>\n      <td>201.0</td>\n      <td>201.0</td>\n      <td>202.0</td>\n      <td>100.0</td>\n      <td>14.0</td>\n      <td>14.0</td>\n      <td>14.0</td>\n      <td>29.0</td>\n      <td>200.0</td>\n      <td>71.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>441456 rows × 57 columns</p>\n</div>",
            "text/plain": "        Patient_ID  SEX  MARITAL  EDUCA  WEIGHT2  HEIGHT3  _INCOMG   _BMI5  \\\n0                1    2        1      4    280.0    510.0        2  4018.0   \n1                2    2        2      6    165.0    508.0        1  2509.0   \n2                3    2        2      4    158.0    511.0        5  2204.0   \n3                4    2        1      4    180.0    507.0        5  2819.0   \n4                5    2        1      5    142.0    504.0        5  2437.0   \n...            ...  ...      ...    ...      ...      ...      ...     ...   \n441451      441452    2        3      2    104.0    503.0        2  1842.0   \n441452      441453    2        1      5    160.0    503.0        1  2834.0   \n441453      441454    2        1      4    247.0    505.0        3  4110.0   \n441454      441455    1        5      5    166.0    511.0        1  2315.0   \n441455      441456    2        1      6    135.0    502.0        1  2469.0   \n\n        _AGEG5YR  GENHLTH  EXERANY2   EXRACT11  EXEROFT1  EXERHMM1  EXRACT21  \\\n0              9      5.0       2.0  52.432544     103.0      30.0       0.0   \n1              7      3.0       1.0  64.000000     212.0     100.0      69.0   \n2             11      4.0       1.0  52.432544     103.0      30.0       0.0   \n3              9      5.0       2.0  52.432544     103.0      30.0       0.0   \n4              9      5.0       2.0  52.432544     103.0      30.0       0.0   \n...          ...      ...       ...        ...       ...       ...       ...   \n441451        11      4.0       2.0  52.432544     103.0      30.0       0.0   \n441452         2      1.0       1.0  64.000000     105.0      30.0       0.0   \n441453        11      4.0       1.0  52.432544     103.0      30.0       0.0   \n441454         7      3.0       2.0  52.432544     103.0      30.0       0.0   \n441455         9      2.0       1.0  64.000000     103.0      30.0       0.0   \n\n        EXEROFT2  EXERHMM2  ALCDAY5  AVEDRNK2  MAXDRNKS  DROCDY3_  _RFBING5  \\\n0          102.0      30.0      0.0       1.0       2.0         0         1   \n1          212.0     100.0      0.0       1.0       2.0         0         1   \n2          102.0      30.0      0.0       1.0       2.0       900         1   \n3          102.0      30.0      0.0       1.0       2.0         0         1   \n4          102.0      30.0      0.0       1.0       2.0         0         1   \n...          ...       ...      ...       ...       ...       ...       ...   \n441451     102.0      30.0      0.0       1.0       2.0         0         1   \n441452     102.0      30.0      0.0       1.0       2.0         0         1   \n441453     102.0      30.0    202.0       2.0       2.0         7         1   \n441454     102.0      30.0      0.0       1.0       2.0         0         1   \n441455     102.0      30.0      0.0       1.0       2.0         0         1   \n\n        _DRNKWEK  _RFDRHV5  DRNKANY5  MENTHLTH  FRUIT1  FVBEANS  FVGREEN  \\\n0              0         1         2        18   310.0    320.0    310.0   \n1              0         1         2         0   305.0    302.0    202.0   \n2          99900         1         1         0   101.0    555.0    101.0   \n3              0         1         2        30   101.0    555.0    301.0   \n4              0         1         2         0   102.0    203.0    204.0   \n...          ...       ...       ...       ...     ...      ...      ...   \n441451         0         1         2         0   555.0    205.0    555.0   \n441452         0         1         2         0   101.0    202.0    303.0   \n441453        93         1         1        20   101.0    555.0    101.0   \n441454         0         1         2         0   101.0    101.0    202.0   \n441455         0         1         2         0   101.0    201.0    201.0   \n\n        FVORANG  VEGETAB1  FRUTDA1_  BEANDAY_  GRENDAY_  ORNGDAY_  VEGEDA1_  \\\n0         305.0     101.0      33.0      67.0      33.0      17.0     100.0   \n1         202.0     304.0      17.0       7.0      29.0      29.0      13.0   \n2         555.0     101.0     100.0       0.0     100.0       0.0     100.0   \n3         301.0     201.0     100.0       0.0       3.0       3.0      14.0   \n4         310.0     320.0     200.0      43.0      57.0      33.0      67.0   \n...         ...       ...       ...       ...       ...       ...       ...   \n441451    201.0     201.0       0.0      71.0       0.0      14.0      14.0   \n441452    201.0     202.0     100.0      29.0      10.0      14.0      29.0   \n441453    555.0     101.0     100.0       0.0     100.0       0.0     100.0   \n441454    301.0     301.0     100.0     100.0      29.0       3.0       3.0   \n441455    201.0     202.0     100.0      14.0      14.0      14.0      29.0   \n\n        _FRUTSUM  _VEGESUM  _FRTLT1  _VEGLT1  BPHIGH4  BPMEDS  BLOODCHO  \\\n0           50.0     217.0        2        1      1.0     1.0         1   \n1           24.0      78.0        2        2      3.0     1.0         1   \n2          100.0     200.0        1        1      3.0     1.0         1   \n3          100.0      20.0        1        2      1.0     1.0         1   \n4          100.0     200.0        1        1      3.0     1.0         1   \n...          ...       ...      ...      ...      ...     ...       ...   \n441451      29.0     200.0        2        2      1.0     1.0         1   \n441452     117.0      82.0        1        2      3.0     1.0         1   \n441453     100.0     200.0        1        1      1.0     1.0         1   \n441454     200.0     135.0        1        1      1.0     1.0         1   \n441455     200.0      71.0        1        2      1.0     1.0         1   \n\n        CHOLCHK  TOLDHI2  CVDINFR4  CVDCRHD4  CVDSTRK3  _MICHD  CHCSCNCR  \\\n0           1.0      1.0         2       2.0         2     2.0       2.0   \n1           4.0      2.0         2       2.0         2     2.0       2.0   \n2           1.0      1.0         7       2.0         1     2.0       2.0   \n3           1.0      1.0         2       2.0         2     2.0       2.0   \n4           1.0      2.0         2       2.0         2     2.0       2.0   \n...         ...      ...       ...       ...       ...     ...       ...   \n441451      1.0      1.0         2       2.0         2     2.0       2.0   \n441452      1.0      2.0         2       2.0         2     2.0       2.0   \n441453      1.0      1.0         2       2.0         2     2.0       2.0   \n441454      1.0      2.0         2       2.0         2     2.0       2.0   \n441455      1.0      1.0         1       2.0         2     1.0       1.0   \n\n        DIABETE3  SMOKE100  SMOKDAY2  USENOW3  _SMOKER3  _RFSMOK3  PHYSHLTH  \n0            3.0       1.0       3.0      3.0         2         1      15.0  \n1            3.0       1.0       1.0      3.0         1         2       0.0  \n2            3.0       2.0       3.0      3.0         2         1      15.0  \n3            3.0       2.0       3.0      3.0         2         1      30.0  \n4            3.0       2.0       3.0      3.0         2         1      20.0  \n...          ...       ...       ...      ...       ...       ...       ...  \n441451       1.0       2.0       3.0      3.0         2         1       0.0  \n441452       3.0       2.0       3.0      3.0         2         1       0.0  \n441453       3.0       1.0       3.0      3.0         2         1       0.0  \n441454       3.0       2.0       3.0      3.0         2         1       0.0  \n441455       1.0       2.0       3.0      3.0         2         1       0.0  \n\n[441456 rows x 57 columns]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 15,
      "metadata": {},
      "id": "e5cb8095"
    },
    {
      "cell_type": "code",
      "source": [
        "# Identify the cluster with the highest proportion of patients with mental issues\n",
        "cluster_mental_issues = pd.DataFrame(daf.groupby(kmeans.labels_)['MENTHLTH'].mean())\n",
        "cluster_mental_issues = cluster_mental_issues.sort_values(by='MENTHLTH', ascending=False).head(1)\n",
        "mental_issues_cluster_label = cluster_mental_issues.index[0]\n",
        "#'_BMI5': [2204.0], 'SEX': [1.0], 'MARITAL': [1.0], '_AGEG5YR': [2.0], 'EXEROFT1': [103.0], 'MAXDRNKS' :[2.0],'SMOKDAY2' :[1.0],'PHYSHLTH' :[15.0],'VEGETAB1' :[201.0],'FRUIT1' :[101.0],'GENHLTH' :[3.0],'EDUCA' :[5],'_INCOMG' :[2], 'MENTHLTH': [0]\n",
        "# Make a prediction for a new patient\n",
        "new_patient = pd.DataFrame({'_INCOMG' :[5], 'GENHLTH':[3.0], 'EXERANY2':[2.0], '_RFBING5':[1], '_RFDRHV5':[1], '_VEGLT1':[2],\n",
        "       'BPMEDS':[2.0], 'BLOODCHO':[1], 'CVDINFR4':[7], 'CVDCRHD4':[1.0], 'CVDSTRK3':[2], '_MICHD':[1.0],\n",
        "       'CHCSCNCR':[1.0], 'DIABETE3':[2.0], 'SMOKE100':[2.0], 'SMOKDAY2':[3.0], 'USENOW3':[3.0], '_SMOKER3':[2], 'MENTHLTH':[20],\n",
        "       '_RFSMOK3':[2], 'PHYSHLTH':[15.0]\n",
        "       })\n",
        "new_data_pca = pca.transform(new_patient)\n",
        "# Predict the cluster label for the new patient\n",
        "new_patient_cluster = kmeans.predict(new_data_pca)\n",
        "\n",
        "# Check if the new patient is more likely to develop mental issues based on the identified cluster\n",
        "if new_patient_cluster == mental_issues_cluster_label:\n",
        "    print(\"This patient is more likely to develop mental issues.\")\n",
        "else:\n",
        "    print(\"This patient is not more likely to develop mental issues.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "This patient is more likely to develop mental issues.\n"
        }
      ],
      "execution_count": 16,
      "metadata": {},
      "id": "6c47af23"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Mental Health Risk Prediction:"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "id": "7eb05966-5841-435c-88e6-8493b19475c2"
    },
    {
      "cell_type": "code",
      "source": [
        "# Split data into features (X) and target variable (y)\r\n",
        "X = daf.drop('MENTHLTH', axis=1)\r\n",
        "y = daf['MENTHLTH']\r\n",
        "\r\n",
        "# Add the cluster labels as a new column to the DataFrame\r\n",
        "cluster_labels = kmeans.labels_\r\n",
        "daf['cluster'] = cluster_labels\r\n"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "id": "289eed46-da7b-475b-80af-252c17139d80"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import SVC\r\n",
        "from sklearn.metrics import precision_score, recall_score\r\n",
        "# Assuming you have obtained the clusters from the segmentation part\r\n",
        "# and stored them in a variable called 'clusters'\r\n",
        "\r\n",
        "# Assuming you have a DataFrame 'df' with the necessary variables for prediction\r\n",
        "# X: Input features related to health behavior\r\n",
        "# y: Target variable representing a specific health behavior\r\n",
        "\r\n",
        "# Add the cluster labels as a new column to the DataFrame\r\n",
        "daf['cluster'] = cluster_labels\r\n",
        "\r\n",
        "# Split the data into training and testing sets\r\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\r\n",
        "\r\n",
        "# Train an SVM model on the training data\r\n",
        "model = SVC()\r\n",
        "model.fit(X_train, y_train)\r\n",
        "\r\n",
        "# Predict the health behavior for the test data\r\n",
        "predictions = model.predict(X_test)\r\n",
        "\r\n",
        "# Evaluate the performance of the model (e.g., accuracy, precision, recall)\r\n",
        "accuracy = model.score(X_test, y_test)\r\n",
        "precision = precision_score(y_test, predictions)\r\n",
        "recall = recall_score(y_test, predictions)\r\n",
        "\r\n",
        "# Print the evaluation metrics\r\n",
        "print(\"Accuracy:\", accuracy)\r\n",
        "print(\"Precision:\", precision)\r\n",
        "print(\"Recall:\", recall)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {},
      "id": "29915446"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Health Behavior Prediction:"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "id": "897f18ec-72c5-42be-8f26-902962c0c6c6"
    },
    {
      "cell_type": "code",
      "source": [
        "# Split data into features (X) and target variable (y)\r\n",
        "X = daf.drop(['SMOKE100', 'SMOKDAY2', 'USENOW3', '_SMOKER3', 'MENTHLTH',\r\n",
        "            '_RFSMOK3', 'PHYSHLTH','GENHLTH', 'EXERANY2','_VEGLT1'], axis=1)\r\n",
        "y = daf[['SMOKE100', 'SMOKDAY2', 'USENOW3', '_SMOKER3', 'MENTHLTH',\r\n",
        "            '_RFSMOK3', 'PHYSHLTH','GENHLTH', 'EXERANY2','_VEGLT1']]\r\n",
        "\r\n",
        "# Add the cluster labels as a new column to the DataFrame\r\n",
        "cluster_labels = kmeans.labels_\r\n",
        "daf['cluster'] = cluster_labels"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {},
      "id": "6b2bc14c"
    },
    {
      "cell_type": "code",
      "source": [
        "# Split data into training and testing sets\r\n",
        "X_train, X_test, y_train_list, y_test_list = train_test_split(X, y, test_size=0.2, random_state=42)\r\n",
        "print(\"Shape of y_train_list:\", y_train_list.shape)\r\n",
        "print(\"Shape of y_test_list:\", y_test_list.shape)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "id": "c163dd0d-ce95-4456-8d59-3e164d96a902"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import SVC\r\n",
        "import pandas as pd\r\n",
        "from sklearn.preprocessing import StandardScaler\r\n",
        "from sklearn.model_selection import train_test_split\r\n",
        "\r\n",
        "# Preprocess the data (scaling, handling missing values, etc.)\r\n",
        "scaler = StandardScaler()\r\n",
        "X_scaled = scaler.fit_transform(X)\r\n",
        "\r\n",
        "# Split the data into training and testing sets\r\n",
        "X_train, X_test, y_train, y_test = train_test_split(\r\n",
        "    X_scaled, y, test_size=0.2, random_state=42)\r\n",
        "\r\n",
        "# Train separate logistic regression models for each target feature\r\n",
        "sv_models = {}\r\n",
        "predicted_risk_scores = {}\r\n",
        "\r\n",
        "for feature in y.columns:\r\n",
        "    sv = SVC()\r\n",
        "    sv.fit(X_train, y_train[feature])\r\n",
        "    sv_models[feature] = sv\r\n",
        "    predicted_risk_scores[feature] = sv.predict_proba(X_scaled)[:, 1]\r\n",
        "\r\n",
        "# Assign the predicted risk scores to each target feature using the same cluster labels\r\n",
        "for feature in y.columns:\r\n",
        "    daf[f'PredictedRisk_{feature}'] = predicted_risk_scores[feature]\r\n",
        "\r\n",
        "# Calculate the average predicted risk score for each cluster and each target feature\r\n",
        "average_risk_scores = {}\r\n",
        "\r\n",
        "for feature in y.columns:\r\n",
        "    average_risk_scores[feature] = {}\r\n",
        "    for cluster in set(cluster_labels):\r\n",
        "        cluster_indices = cluster_labels == cluster\r\n",
        "        average_risk_scores[feature][cluster] = predicted_risk_scores[feature][cluster_indices].mean()\r\n",
        "\r\n",
        "# Print the predicted risk scores for each cluster and each target feature\r\n",
        "for feature in y.columns:\r\n",
        "    for cluster, prediction in average_risk_scores[feature].items():\r\n",
        "        print(f\"Cluster {cluster}: Predicted risk of {feature} - {prediction:.4f}\")"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      },
      "id": "20e4129c-e0b5-4c40-b8e5-63bfc78164ee"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.5",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      }
    },
    "kernel_info": {
      "name": "python3"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}